import { VALID_ANIMATIONS, VALID_GAME_COMMANDS } from "../utils/constants";

export type CheckResult = {
  passed: boolean;
  error?: string;
  hint?: string;
  progress?: number;
  completedSteps?: string[];
};

export type QuestConfig = {
  baseCode: string;
};

export class FrontendCodeValidator {
  private static readonly API_CALL_REGEX = /([a-zA-Z]+)\s*\(/g;
  private static readonly FULL_API_REGEX = /([a-zA-Z]+)\s*\((.*?)\)/g;
  private static readonly DANGEROUS_PATTERNS = [
    "while(true)",
    "for(;;)",
    "setInterval",
    "setTimeout",
    "fetch",
    "XMLHttpRequest",
    "eval",
    "Function",
  ];

  // ƒê·ªãnh nghƒ©a s·ªë l∆∞·ª£ng tham s·ªë y√™u c·∫ßu cho t·ª´ng API
  private static readonly API_PARAM_COUNTS: { [key: string]: number } = {
    setBackground: 1,
    setFloor: 3,
    setColor: 2,
    spawn: 4 | 5,
    spawnRandom: 4 | 5,
    setName: 2,
    scale: 2,
    move: 3,
    moveRandom: 4,
    onKey: 5,
    interact: 5,
    autoAttack: 3,
    when: 4,
    setHealth: 2,
    startTimer: 1,
  };

  static async validate(
    userCode: string,
    quest: QuestConfig
  ): Promise<CheckResult> {
    const result: CheckResult = { passed: false };

    // 1. Ki·ªÉm tra c√°c m·∫´u nguy hi·ªÉm
    const dangerousPattern = this.DANGEROUS_PATTERNS.find((pattern) =>
      userCode.includes(pattern)
    );
    if (dangerousPattern) {
      result.error = `‚ö†Ô∏è Code c√≥ th·ªÉ g√¢y v·∫•n ƒë·ªÅ: "${dangerousPattern}". H√£y th·ª≠ c√°ch kh√°c nh√©!`;
      return result;
    }

    // 2. Check c√∫ ph√°p
    try {
      new Function(userCode);
    } catch (error: any) {
      result.error = `ü§î C√≥ l·ªói c√∫ ph√°p: ${error.message}. Ki·ªÉm tra d·∫•u ngo·∫∑c ho·∫∑c spelling nh√©!`;
      return result;
    }

    // 3. Check xem c√°c l·ªánh y√™u c·∫ßu c√≥ trong userCode kh√¥ng
    const userCommands = Array.from(userCode.matchAll(this.API_CALL_REGEX))
      .map((match) => match[1])
      .filter((api) => api !== "console");

    // Tr√≠ch xu·∫•t c√°c l·ªánh t·ª´ quest.baseCode
    const requiredCommands = quest.baseCode
      ? Array.from(quest.baseCode.matchAll(this.API_CALL_REGEX)).map(
          (match) => match[1]
        )
      : [];

    const missingAPIs = requiredCommands.filter(
      (api) => !userCommands.includes(api)
    );
    if (missingAPIs.length > 0) {
      result.error = `üí° B·∫°n c·∫ßn s·ª≠ d·ª•ng l·ªánh: ${missingAPIs[0]}(). H√£y th·ª≠ th√™m nh√©!`;
      return result;
    }

    // 4. M·ªçi l·ªánh trong userCode ph·∫£i l√† nh·ªØng l·ªánh c·ªßa API game
    const invalidAPIs = userCommands.filter(
      (api) => !VALID_GAME_COMMANDS.includes(api as string)
    );
    if (invalidAPIs.length > 0) {
      result.error = `üö´ L·ªánh kh√¥ng ƒë∆∞·ª£c ph√©p: ${invalidAPIs[0]}. Ch·ªâ d√πng c√°c l·ªánh trong b√†i h·ªçc nh√©!`;
      return result;
    }

    // 5. Ki·ªÉm tra c√°c tham s·ªë animation
    const fullAPICalls = Array.from(userCode.matchAll(this.FULL_API_REGEX));
    for (const match of fullAPICalls) {
      const params = match[2];
      const animationMatch = params.match(/animation\s*:\s*["'](.*?)["']/);
      if (animationMatch) {
        const animationValue = animationMatch[1];
        if (!VALID_ANIMATIONS.includes(animationValue as string)) {
          result.error = `üé¨ Animation "${animationValue}" kh√¥ng h·ª£p l·ªá! Th·ª≠ d√πng: ${VALID_ANIMATIONS.join(
            ", "
          )}`;
          return result;
        }
      }
    }

    // 6. Ki·ªÉm tra c√°c tham s·ªë trong m·ªôt API c√≥ truy·ªÅn v√†o ƒë·ªß kh√¥ng
    for (const match of fullAPICalls) {
      const command = match[1];
      const params = match[2];
      const paramCount = params ? params.split(",").length : 0;
      const expectedCount = this.API_PARAM_COUNTS[command] || 0;

      if (paramCount !== expectedCount) {
        result.error = `üìù L·ªánh ${command} c·∫ßn ${expectedCount} tham s·ªë, nh∆∞ng b·∫°n ch·ªâ truy·ªÅn ${paramCount}!`;
        return result;
      }
    }

    // 7. Theo d√µi ti·∫øn ƒë·ªô
    const progress = Math.round(
      ((quest.baseCode.length - missingAPIs.length) / quest.baseCode.length) *
        100
    );
    result.passed = true;
    result.progress = progress;
    result.completedSteps = requiredCommands.filter((api) =>
      userCommands.includes(api)
    );
    result.hint = `üéâ Tuy·ªát! B·∫°n ƒë√£ ho√†n th√†nh ${progress}% b√†i t·∫≠p!`;
    return result;
  }
}
