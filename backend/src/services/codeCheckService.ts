import {
  ERROR_MESSAGES,
  VALID_ANIMATIONS,
  VALID_GAME_COMMANDS,
} from "../utils/constants";
import { VM } from "vm2";
import { createBackendSandbox } from "../utils/learning-api.backend";

//Service ƒë·ªÉ ki·ªÉm tra code
export type CheckResult = {
  passed: boolean;
  error?: string;
  hint?: string;
  refs?: any; // Th√¥ng tin c√°c object m√† h·ªçc sinh t·∫°o ra
  events?: any; // N·∫øu c√≥ h·ªá th·ªëng events (khi m√°u = 0, win...)
};

type ValidCommand = (typeof VALID_GAME_COMMANDS)[number];
type ValidAnimation = (typeof VALID_ANIMATIONS)[number];

// Cache regex patterns
const COMMAND_REGEX = /([a-zA-Z]+)\((.*?)\)/g;
const ANIMATION_REGEX = /{.*?animation\s*:\s*["'](.*?)["']/;

const syntaxCheck = async (userCode: string): Promise<CheckResult> => {
  const result: CheckResult = { passed: false };

  try {
    new Function(userCode); // Ki·ªÉm tra c√∫ ph√°p
    result.passed = true;
  } catch (error: any) {
    result.error = `L·ªói c√∫ ph√°p: ${error.message}`;
  }
  return result;
};

const ContentCheck = async (
  userCode: string,
  quest: any
): Promise<CheckResult> => {
  const result: CheckResult = { passed: false };

  try {
    // Tr√≠ch xu·∫•t danh s√°ch l·ªánh t·ª´ baseCode
    const requiredCommands =
      quest.baseCode
        ?.match(/[a-zA-Z]+\(/g)
        ?.map((cmd: string) => cmd.slice(0, -1)) || [];

    const userCommands =
      userCode.match(/[a-zA-Z]+\(/g)?.map((cmd) => cmd.slice(0, -1)) || [];

    // Ki·ªÉm tra xem t·∫•t c·∫£ l·ªánh y√™u c·∫ßu c√≥ trong userCode kh√¥ng
    for (const cmd of requiredCommands) {
      if (!userCommands.includes(cmd)) {
        result.hint = `Thi·∫øu l·ªánh ${cmd}(). G·ª£i √Ω: h√£y s·ª≠ d·ª•ng ${cmd}(...) nh∆∞ trong ƒë·ªÅ b√†i.`;
        return result;
      }
    }

    // Tr√≠ch xu·∫•t l·ªánh v√† ki·ªÉm tra r·∫±ng m·ªçi l·ªánh trong userCode ƒë·ªÅu thu·ªôc danh s√°ch VALID_GAME_COMMANDS. (cleancode)
    const commandMatches = userCode.match(COMMAND_REGEX) || [];
    for (const match of commandMatches) {
      const command = match.match(/[a-zA-Z]+/)?.[0] || "";
      if (!VALID_GAME_COMMANDS.includes(command as ValidCommand)) {
        result.error = `${ERROR_MESSAGES.INVALID_COMMAND} L·ªánh kh√¥ng h·ª£p l·ªá: ${command}`;
        return result;
      }

      // Ki·ªÉm tra tham s·ªë animation n·∫øu c√≥ (cleancode)
      const params = match.match(/\((.*?)\)/)?.[1] || "";
      const animationMatch = params.match(ANIMATION_REGEX);
      if (animationMatch) {
        const animationValue = animationMatch[1];
        if (!VALID_ANIMATIONS.includes(animationValue as ValidAnimation)) {
          result.error = `${ERROR_MESSAGES.INVALID_ANIMATION} Gi√° tr·ªã kh√¥ng h·ª£p l·ªá: ${animationValue}`;
          return result;
        }
      }
    }

    result.passed = true;
  } catch (error: any) {
    result.error = `L·ªói ki·ªÉm tra n·ªôi dung: ${error.message}`;
  }
  return result;
};

const logicCheck = async (
  userCode: string,
  quest: any
): Promise<CheckResult> => {
  const result: CheckResult = { passed: false };

  try {
    const sandbox = createBackendSandbox(); // cung c·∫•p API backend nh∆∞ spawn, move...

    const vm = new VM({
      timeout: 1000,
      sandbox: sandbox,
      eval: false,
      wasm: false,
    });

    // ‚úÖ Ch·∫°y code h·ªçc sinh trong sandbox
    vm.run(userCode);

    // ‚úÖ L·∫•y tr·∫°ng th√°i game sau khi ch·∫°y
    const state = sandbox.getRefs?.() || {};
    const events = sandbox.getEvents?.() || [];

    // üîç T√πy theo logic quest m√† b·∫°n c√≥ th·ªÉ th√™m ƒëi·ªÅu ki·ªán t·ª± ƒë·ªông ch·∫•m
    // (t√πy h·ªá th·ªëng b·∫°n, v√≠ d·ª• so s√°nh to·∫° ƒë·ªô object, s·ªë l∆∞·ª£ng, t√™n...)

    result.passed = true;
    result.refs = state;
    result.events = events;
  } catch (error: any) {
    result.error = `L·ªói khi ch·∫°y code: ${error.message}`;
  }

  return result;
};

export const codeCheckService = {
  syntaxCheck,
  ContentCheck,
  logicCheck,
};
