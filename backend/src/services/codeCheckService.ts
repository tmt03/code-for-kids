import { VM } from "vm2";
import { createBackendSandbox } from "../utils/learning-api.backend";

export type CheckResult = {
  passed: boolean;
  error?: string;
  hint?: string;
};

const logicCheck = async (userCode: string): Promise<CheckResult> => {
  console.log("\n=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA CODE ===");
  console.log("Code ƒë∆∞·ª£c submit:", userCode);

  const result: CheckResult = { passed: false };

  try {
    // T·∫°o sandbox t·ª´ learning-api.backend.ts
    const sandbox = createBackendSandbox();
    console.log("\n=== SANDBOX INFO ===");
    console.log("C√°c h√†m c√≥ trong sandbox:", Object.keys(sandbox));
    console.log(
      "Chi ti·∫øt h√†m spawn:",
      typeof sandbox.spawn,
      sandbox.spawn.toString()
    );

    // T·∫°o VM v·ªõi sandbox ƒë√£ setup
    const vm = new VM({
      timeout: 2000,
      sandbox: sandbox,
      eval: false,
      wasm: false,
    });

    // Ch·∫°y th·ª≠ code trong sandbox
    console.log("\n=== B·∫ÆT ƒê·∫¶U CH·∫†Y CODE ===");
    try {
      vm.run(userCode);
      console.log("Code ch·∫°y th√†nh c√¥ng trong VM");
    } catch (vmError: any) {
      console.error("L·ªói khi ch·∫°y trong VM:", vmError.message);
      console.error("Stack trace:", vmError.stack);
      throw vmError; // N√©m l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü catch b√™n ngo√†i
    }

    // Ki·ªÉm tra k·∫øt qu·∫£ sau khi ch·∫°y
    const refs = sandbox.getRefs();
    const events = sandbox.getEvents();
    console.log("\n=== K·∫æT QU·∫¢ SAU KHI CH·∫†Y ===");
    console.log("Refs ƒë∆∞·ª£c t·∫°o:", JSON.stringify(refs, null, 2));
    console.log("Events ƒë∆∞·ª£c k√≠ch ho·∫°t:", JSON.stringify(events, null, 2));

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán th√†nh c√¥ng
    if (refs.length === 0) {
      throw new Error(
        "Kh√¥ng c√≥ sprite n√†o ƒë∆∞·ª£c t·∫°o. H√£y s·ª≠ d·ª•ng l·ªánh spawn() ƒë·ªÉ t·∫°o sprite!"
      );
    }

    // N·∫øu ch·∫°y ƒë·∫øn ƒë√¢y m√† kh√¥ng c√≥ l·ªói, code ƒë√£ ch·∫°y th√†nh c√¥ng
    result.passed = true;
    result.hint = "üéâ Code ch·∫°y t·ªët! B·∫°n l√†m r·∫•t tuy·ªát!";
  } catch (error: any) {
    console.error("\n=== L·ªñI PH√ÅT SINH ===");
    console.error("Lo·∫°i l·ªói:", error.name);
    console.error("Th√¥ng b√°o l·ªói:", error.message);
    console.error("Stack trace:", error.stack);

    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
    if (error.message.includes("timeout")) {
      result.error =
        "‚è∞ Code ch·∫°y qu√° l√¢u! Ki·ªÉm tra xem c√≥ v√≤ng l·∫∑p v√¥ h·∫°n kh√¥ng?";
      result.hint = "ƒê·∫£m b·∫£o code c·ªßa b·∫°n kh√¥ng c√≥ v√≤ng l·∫∑p v√¥ h·∫°n";
    } else if (error.message.includes("Cannot read properties of undefined")) {
      result.error =
        "‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng! H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ t·∫°o ƒë·ªëi t∆∞·ª£ng tr∆∞·ªõc khi s·ª≠ d·ª•ng";
      result.hint =
        "Ki·ªÉm tra xem b·∫°n ƒë√£ g·ªçi spawn() tr∆∞·ªõc khi s·ª≠ d·ª•ng c√°c l·ªánh kh√°c ch∆∞a";
    } else if (error.message.includes("spawn")) {
      result.error = "üñºÔ∏è L·ªói khi t·∫°o sprite: " + error.message;
      result.hint =
        "Ki·ªÉm tra l·∫°i tham s·ªë c·ªßa l·ªánh spawn. V√≠ d·ª•: spawn('castle', 200, 200, {}, 'castle_1')";
    } else if (error.message.includes("is not defined")) {
      result.error = "üîç L·ªánh kh√¥ng t·ªìn t·∫°i: " + error.message;
      result.hint = "Ch·ªâ s·ª≠ d·ª•ng c√°c l·ªánh ƒë√£ ƒë∆∞·ª£c h·ªçc trong b√†i";
    } else if (error.message.includes("Kh√¥ng c√≥ sprite n√†o ƒë∆∞·ª£c t·∫°o")) {
      result.error = "üéØ " + error.message;
      result.hint =
        "H√£y s·ª≠ d·ª•ng l·ªánh spawn() ƒë·ªÉ t·∫°o sprite. V√≠ d·ª•: spawn('castle', 200, 200, {}, 'castle_1')";
    } else {
      result.error = `üêõ C√≥ l·ªói khi ch·∫°y code: ${error.message}`;
      result.hint =
        "Ki·ªÉm tra xem b·∫°n c√≥ g·ªçi l·ªánh ƒë√∫ng kh√¥ng nh√©! N·∫øu v·∫´n g·∫∑p l·ªói, h√£y th·ª≠ l·∫°i v·ªõi c√∫ ph√°p ƒë∆°n gi·∫£n h∆°n.";
    }
  }

  console.log("\n=== K·∫æT QU·∫¢ CU·ªêI C√ôNG ===");
  console.log(JSON.stringify(result, null, 2));
  console.log("=== K·∫æT TH√öC KI·ªÇM TRA CODE ===\n");

  return result;
};

export const codeCheckService = {
  logicCheck,
};
