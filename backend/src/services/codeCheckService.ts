import { VM } from "vm2";

export type CheckResult = {
  passed: boolean;
  error?: string;
  hint?: string;
};

const logicCheck = async (userCode: string): Promise<CheckResult> => {
  const result: CheckResult = { passed: false };

  try {
    // 1. Ki·ªÉm tra xem ƒë√£ ƒë·∫∑t t√™n cho object t·∫°o ra ch∆∞a
    const commandMatches = userCode.match(/([a-zA-Z]+)\((.*?)\)/g) || [];
    for (const match of commandMatches) {
      const command = match.match(/[a-zA-Z]+/)?.[0] || "";
      const params = match.match(/\((.*?)\)/)?.[1] || "";
      const args = params
        .split(",")
        .map((arg: string) => arg.trim().replace(/["']/g, ""));

      if (command === "spawn" || command === "spawnRandom") {
        const spriteRef = command === "spawn" ? args[4] : args[3];
        if (!spriteRef || spriteRef === "") {
          result.error = `üñºÔ∏è ${command} c·∫ßn ƒë·∫∑t t√™n cho object (refName)!`;
          result.hint = `V√≠ d·ª•: ${
            command === "spawn"
              ? "spawn('knight', 300, 200, { animation: 'walk' }, 'knight_1')"
              : "spawnRandom('sword', 100, 500, 'sword_1', 2000)"
          }`;
          return result;
        }
      }
    }

    // 2. Ki·ªÉm tra xem userCode c√≥ ch·∫°y ƒë∆∞·ª£c kh√¥ng
    const vm = new VM({
      timeout: 2000, // Gi·ªõi h·∫°n th·ªùi gian 1 gi√¢y
      sandbox: {},
      eval: false,
      wasm: false,
    });

    vm.run(userCode);
    result.passed = true;
    result.hint = "üéâ Code ch·∫°y t·ªët! B·∫°n l√†m r·∫•t tuy·ªát!";
  } catch (error: any) {
    result.error = `üêõ C√≥ l·ªói khi ch·∫°y code: ${error.message}`;
    result.hint =
      "Ki·ªÉm tra xem b·∫°n c√≥ g·ªçi l·ªánh ƒë√∫ng kh√¥ng nh√©! V√≠ d·ª•: sprite c√≥ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc khi s·ª≠ d·ª•ng kh√¥ng?";
  }

  return result;
};

export const codeCheckService = {
  logicCheck,
};
